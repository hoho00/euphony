#include <Definitions.h>
#include <charset/UTF32Charset.h>
#include <gtest/gtest.h>
#include <tuple>

using namespace Euphony;

typedef std::tuple<std::string, std::string> TestParamType;

class UTF32CharsetTestFixture : public ::testing::TestWithParam<TestParamType> {

public:
    void openCharset() {
        EXPECT_EQ(charset, nullptr);
        charset = new UTF32Charset();
        ASSERT_NE(charset, nullptr);
    }

    Charset *charset = nullptr;
};

TEST_P(UTF32CharsetTestFixture, EncodingTest) {
openCharset();

std::string source;
std::string expectedResult;

std::tie(source, expectedResult) = GetParam();

HexVector actualResult = charset->encode(source);
EXPECT_EQ(actualResult.toString(), expectedResult);
}

TEST_P(UTF32CharsetTestFixture, DecodingTest) {
openCharset();

std::string source;
std::string expectedResult;

std::tie(expectedResult, source) = GetParam();
HexVector hv = HexVector(source);

std::string actualResult = charset->decode(hv);
EXPECT_EQ(actualResult, expectedResult);
}

INSTANTIATE_TEST_CASE_P(
        ChrasetDecodingTestSuite,
        UTF32CharsetTestFixture,
        ::testing::Values(
                TestParamType("a", "00000061"),
                TestParamType("b", "00000062"),
                TestParamType("hello", "00000068000000650000006c0000006c0000006f"),
                TestParamType("COVID-19", "000000430000004f0000005600000049000000440000002d0000003100000039"),
                TestParamType("Hello World", "00000048000000650000006c0000006c0000006f00000020000000570000006f000000720000006c00000064"),
                TestParamType("ToffeeCrunch", "000000540000006f000000660000006600000065000000650000004300000072000000750000006e0000006300000068"),
                TestParamType("EMPERO ARMANI", "000000450000004d0000005000000045000000520000004f0000002000000041000000520000004d000000410000004e00000049"),
                TestParamType("Veni, vidi, vici", "00000056000000650000006e000000690000002c00000020000000760000006900000064000000690000002c0000002000000076000000690000006300000069"),
                TestParamType("Infinitesimal calculus", "000000490000006e00000066000000690000006e00000069000000740000006500000073000000690000006d000000610000006c0000002000000063000000610000006c00000063000000750000006c0000007500000073"),
                TestParamType("abcdefghijklmnopqrstuvwxyz", "0000006100000062000000630000006400000065000000660000006700000068000000690000006a0000006b0000006c0000006d0000006e0000006f000000700000007100000072000000730000007400000075000000760000007700000078000000790000007a"),
                TestParamType("https://en.wikipedia.org/wiki/UTF-32", "00000068000000740000007400000070000000730000003a0000002f0000002f000000650000006e0000002e00000077000000690000006b0000006900000070000000650000006400000069000000610000002e0000006f00000072000000670000002f00000077000000690000006b000000690000002f0000005500000054000000460000002d0000003300000032"),
                TestParamType("https://github.com/euphony-io/euphony/discussions/95", "00000068000000740000007400000070000000730000003a0000002f0000002f0000006700000069000000740000006800000075000000620000002e000000630000006f0000006d0000002f000000650000007500000070000000680000006f0000006e000000790000002d000000690000006f0000002f000000650000007500000070000000680000006f0000006e000000790000002f00000064000000690000007300000063000000750000007300000073000000690000006f0000006e000000730000002f0000003900000035"),
                TestParamType("가", "0000ac00"),
                TestParamType("각", "0000ac01"),
                TestParamType("유포니", "0000c7200000d3ec0000b2c8"),
                TestParamType("안녕하세요", "0000c5480000b1550000d5580000c1380000c694"),
                TestParamType("만나서 반갑습니다.", "0000b9cc0000b0980000c11c000000200000bc180000ac110000c2b50000b2c80000b2e40000002e"),
                TestParamType("UTF32 유닛테스트 집단지성으로 모으기!", "0000005500000054000000460000003300000032000000200000c7200000b2db0000d14c0000c2a40000d2b8000000200000c9d10000b2e80000c9c00000c1310000c73c0000b85c000000200000baa80000c73c0000ae3000000021"),
                TestParamType("韓國", "000097d30000570b"),
                TestParamType("韓國或韩国", "000097d30000570b00006216000097e9000056fd"),
                TestParamType("衆好之 必察焉 衆惡之 必察焉", "000088460000597d00004e4b0000002000005fc500005bdf000071090000002000008846000060e100004e4b0000002000005fc500005bdf00007109"),
                TestParamType("こんにちは", "00003053000030930000306b000030610000306f"),
                TestParamType("Bon appétit !", "000000420000006f0000006e00000020000000610000007000000070000000e90000007400000069000000740000002000000021"),
                TestParamType("Сайн байна уу?", "0000042100000430000004390000043d000000200000043100000430000004390000043d000004300000002000000443000004430000003f"),
                TestParamType("Видимо се опет", "000004120000043800000434000004380000043c0000043e000000200000044100000435000000200000043e0000043f0000043500000442"),
                TestParamType("Rất vui được gặp anh.", "0000005200001ea500000074000000200000007600000075000000690000002000000111000001b000001ee300000063000000200000006700001eb70000007000000020000000610000006e000000680000002e"),
                TestParamType("Trevligt att träffas", "000000540000007200000065000000760000006c00000069000000670000007400000020000000610000007400000074000000200000007400000072000000e400000066000000660000006100000073"),
                TestParamType("Bugün hava çok güzelmiş.", "000000420000007500000067000000fc0000006e000000200000006800000061000000760000006100000020000000e70000006f0000006b0000002000000067000000fc0000007a000000650000006c0000006d000000690000015f0000002e"),
                TestParamType("kācaṃ śaknomyattum; nopahinasti mām", "0000006b00000101000000630000006100001e43000000200000015b000000610000006b0000006e0000006f0000006d00000079000000610000007400000074000000750000006d0000003b000000200000006e0000006f000000700000006100000068000000690000006e00000061000000730000007400000069000000200000006d000001010000006d"),
                TestParamType("សប្បាយ", "0000179f00001794000017d200001794000017b600001799"),
                TestParamType("᚛᚛ᚉᚑᚅᚔᚉᚉᚔᚋ ᚔᚈᚔ ᚍᚂᚐᚅᚑ ᚅᚔᚋᚌᚓᚅᚐ᚜", "0000169b0000169b000016890000169100001685000016940000168900001689000016940000168b00001680000016940000168800001694000016800000168d000016820000169000001685000016910000168000001685000016940000168b0000168c0000169300001685000016900000169c"),
                TestParamType("⠊⠀⠉⠁⠝⠀⠑⠁⠞⠀⠛⠇⠁⠎⠎⠀⠁⠝⠙⠀⠊⠞⠀⠙⠕⠑⠎⠝⠞⠀⠓⠥⠗⠞⠀⠍⠑", "0000280a0000280000002809000028010000281d0000280000002811000028010000281e000028000000281b00002807000028010000280e0000280e00002800000028010000281d00002819000028000000280a0000281e000028000000281900002815000028110000280e0000281d0000281e000028000000281300002825000028170000281e000028000000280d00002811")
        ));